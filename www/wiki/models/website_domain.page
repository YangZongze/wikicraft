<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2017/03/15
]]
include_once("./abstract/base.page")
include_once("./vip.page")

-- 暂时不用
local website_domain = inherit(models.abstract.base, gettable("models.website_domain"))

website_domain.db_name = "website_domain";

function website_domain:ctor() 
	self:addfield("username", "string")
	self:addfield("sitename","string")
	self:addfield("domain", "string")
end

-- 插入记录
function website_domain:api_insert(params)
	local username = getUsername()

	if not username then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	if self:api_getByDomain(params).data then
		return errors:wrap(errors.RECORD_ALREADY_EXIST)
	end

	local vipDB = models.vip:new()
	if vipDB:api_isValidVip({username=username}).data == false then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	if (not params.username) or (not params.sitename) or (not params.domain) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne({['+domain']={params.domain}}, params, resume)

	return errors:wrap(yield())
end

function website_domain:api_upsertCname(params)
	if not params.domain then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	if (string.find(params.domain, ".keepwork.com")) or params.domain == "keepwork.com" then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	return website_domain:api_insert(params)
end

-- 删除记录
function website_domain:api_deleteByDomain(params)
	ensureAuthenticated()

	if not params.domain then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():deleteOne({["+domain"]={params.domain}}, resume)

	return errors:wrap(yield())
end

-- 获取站点所有域名
function website_domain:api_getByName(params)
	if not params.username or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
		
	self:db():find({["+username+sitename"]={params.username, params.sitename}}, resume)

	return errors:wrap(yield())
end

-- 获取记录
function website_domain:api_getByDomain(params)
	if not params.domain then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({['+domain']={params.domain}}, resume)

	return errors:wrap(yield())
end

-- domain validate
function website_domain:api_checkDomain(params)
	if not params.domain then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({['+domain']={params.domain}}, resume)
	local err, data = yield()

	if data then
		return errors:wrap(nil,0) -- 无效
	end
	
	return errors:wrap(nil, 1) -- 有效
end

-- 删除记录通过websiteId
function website_domain:api_deleteByName(params)
	ensureAuthenticated()
	if not params.username or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():delete({['+username+sitename']={params.username, params.sitename}}, resume)

	return errors:wrap(yield())
end
